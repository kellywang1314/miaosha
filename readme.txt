一、js实现定时触发活动（就是使用js在活动开始前计时，到活动时间了触发活动）
涉及到js怎么计时，在离开时很近（比如5秒）怎么处理，秒杀开始后要做什么等等。
1、server端的数据结构设计
后端返回给前端一个json数据结构
array{
  'errno':0
  'data'(
    'url':...;  下单的url
    'token':...; 用户信息校验值
    'itemid':....商品id
  )
}
在秒杀的时候，服务器算除了要返回数据还要设计进行安全校验比如：
1、判断用户请求的来路：只有通过我们web服务器前端展示的网址我们才算正常。
2、限制用户ip的请求次数，防止刷
3、校验用户信息。

所以js触发秒杀活动的流程是怎么的。
假设距离秒杀还有1秒，我们开始准备进行秒杀：此时执行setTimeOut(ajaxrequest,1000)
函数ajaxrequest：我们在秒杀开始之后向服务器端请求json数据。
当后台通过安全校验之后，会返回秒杀购买的url，并填充到a链接的url,同时更改开始秒杀的样式，并且返回token值。


二、js制作秒杀还有多久的计算
因为在一中我们随便定义的离秒杀还有1秒，事实上到底还有多久需要计算，这里就是计算的过程。
timer()：由于html中使用data-click给出了商品开始秒杀时间time，我们利用time-nowtime求得距离开始还有多久。
setInterval(timer,1000):每秒执行一次就会动起来。

三、这个秒杀流程梳理，也就是miao.js代码分析。
1、首先封装ajax请求为一个对象。
2、我们定义三个计时器：
//定时触发活动,用来在秒杀开始时候触发秒杀。
var buyer = null;
//计算事件，用来计算距离秒杀还有多久。
var countTime = null;
//剩余时间事件，用来存储距离秒杀开始还有多久。
var leftTimeOut = null;
3、秒杀的过程。
timer()：使用data-click给出了商品开始秒杀时间time，我们利用leftime=time-nowtime求得距离开始还有多久。
countTime = setInterval(timer, 1000);每秒执行一次。然后把结果输出到页面。
如果秒杀已经开始就清除countTime计时器，leftTimeOut用来记录距离秒杀还有多久，当距离秒杀开始还有5秒时候主动调用start()
向服务器发送ajax请求,然后服务器会进行校验，校验通过后会返回购买接口给a的href，同时返回token,改变前端的显示。
清除buyer计时器，最后清除leftTimeOut计时器。
4、a标签只能第一次点击成功跳转，不能多次点击，这是为了减轻服务器端压力。
buyItem()：通过设置a的onclick事件实现限制。
5、js端判断用户已经购买过就不能再购买
后台的接口设计：timer.php
canbuy():通过后台返回的校验情况判断用户是否能购买，如果不能购买就改变前端样式为已抢光，不论何种情况都能做成已抢光。




